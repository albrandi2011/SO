#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<semaphore.h>
#include<unistd.h>
#define PAZIENTE 0
#define DONATORE 1

pthread_mutex_t *lettini, *sacche;

int L, sac, let;
char termina;
typedef struct{
  pthread_t tid;
  int id;
  int key;
}str_persona;
void *routine_prelievo(void *arg){
  str_persona *persona;
  persona=arg;
         
            printf("Sono il la persona %d, attendo un lettino\n", persona->id);
          if(persona->key==DONATORE){
             printf("Sono il donatore %d...\n",persona->id);
               let=rand()%L;
              pthread_mutex_lock(&lettini[let]);
             printf("Sono il donatore %d, ho occupato un lettino\n",persona->id);
               sac=rand()%L;
              pthread_mutex_lock(&sacche[sac]);
               printf("Sono il donatore %d, Sto donando\n",persona->id);
                sleep(rand()%7);
                pthread_mutex_unlock(&sacche[sac]);
               sleep(rand()%7);
               pthread_mutex_unlock(&lettini[let]);
              }
           else{
              printf("Sono il paziente %d...\n",persona->id);
               let=rand()%L;
              pthread_mutex_lock(&lettini[let]);
             printf("Sono il paziente %d, ho occupato un lettino\n",persona->id);
               sac=rand()%L;
              pthread_mutex_lock(&sacche[sac]);
               printf("Sono il paziente %d, mi stanno facendo il prelievo\n",persona->id);
                sleep(rand()%7);
                  pthread_mutex_unlock(&sacche[sac]);
               sleep(rand()%7);
               pthread_mutex_unlock(&lettini[let]);
               
            }
      
pthread_exit(NULL);
}

int main(int argc, char *argv[]){
 int don, rc, i;
  str_persona *persona;
  pthread_attr_t attr;
  void *status;

  srand(time(NULL));
  if(argc!=3){
   printf("Errore!!\n");
    exit(-1);
    }

 don=atoi(argv[1]); //numero di persone
 L=atoi(argv[2]); //numero lettini e sacche

   persona=(str_persona *)malloc(don*sizeof(str_persona));
  lettini=(pthread_mutex_t *)malloc(L*sizeof(pthread_mutex_t));
  sacche=(pthread_mutex_t *)malloc(L*sizeof(pthread_mutex_t));
   //inizializzazione mutex
   for(i=0; i<L; i++){
      pthread_mutex_init(&lettini[i],NULL);
      pthread_mutex_init(&sacche[i],NULL);
        }
   //inizializzo il thread per il medico
      
  //inizializzazione thread
    pthread_attr_init(&attr);
      pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);
    for(i=0; i<don; i++){
      persona[i].id=i;
      persona[i].key=rand()%2;
      rc= pthread_create(&persona[i].tid,&attr,routine_prelievo,(void *)(&persona[i]));
    if(rc){
     printf("Errore!!\n");
      exit(-1);
       }
     }
    pthread_attr_destroy(&attr);
      for(i=0; i<don; i++){
       pthread_join(persona[i].tid,&status);
        }
  //rilascio risorse
    for(i=0; i<L; i++){
       pthread_mutex_destroy(&lettini[i]);
       pthread_mutex_destroy(&sacche[i]);
        }

pthread_exit(NULL);
}
